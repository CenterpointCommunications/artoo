---
title: Digispark with Artoo
author: The Hybrid Group
page_title: Digispark
page_subtitle: "<a href='https://github.com/hybridgroup/artoo-digispark' class='repository'>Repository</a> <a class+'issues' href='https://github.com/hybridgroup/artoo-digispark/issues'>Issues</a>"
layout: page
---
.documentation
  %section.intro
    = image_tag "/images/digispark.jpg", class: "display"

    %p
      The Digispark is an Attiny85 based microcontroller development board similar to the Arduino line, only cheaper, smaller,
      and a bit less powerful. With a whole host of shields to extend its functionality and the ability to
      use the familiar Arduino IDE the Digispark is a great way to jump into electronics, or perfect for when
      an Arduino is too big or too much.

    %p
      For more info about the Digispark platform click
      = succeed "." do
        = link_to "here", "http://digistump.com/category/1", target: :blank

  %section.example
    %h2 What the code looks like?
    %p
      This small program lets you push a button on the digispark to turn a LED on or off.
      In less than 10 lines of code using Artoo.
    :markdown
          :::ruby
          require 'artoo'

          connection :digispark, :adaptor => :littlewire, :vendor => 0x1781, :product => 0x0c9f
          device :led, :driver => :led, :pin => 1
          device :button, :driver => :button, :pin => 0, :interval => 0.01

          work do
            puts "Press the button connected on pin \#{button.pin}..."

            on button, :push  => proc { led.toggle }
          end

  %section.drivers
    %h2 Drivers
    %p
      Thanks to
      %b artoo
      and
      %b ruby
      it is possible to interact with several I/O hardware devices and interfaces connected to the digispark
      using a set of already defined and easy to use drivers, all of this thanks to the artoo architecture, in conjuction with artoo-digispark
      adaptor (using the littlewire communication protocol),
      which makes it even possible to swap the entire platform for something else like arduino, and keep using the same code you just wrote for
      digispark, this just by swapping a couple of lines in your program.
    %p
      Available drivers for the digispark platform are listed below, the drivers contain detailed documentation and examples of what kind
      physical computing (using artoo and ruby) you could be doing:

    .hardware
      .devices
        = partial "documentation/partials/analog-sensor"
        = partial "documentation/partials/button"
        = partial "documentation/partials/led"
        = partial "documentation/partials/maxbotix"
        = partial "documentation/partials/motor"
        = partial "documentation/partials/servo"
