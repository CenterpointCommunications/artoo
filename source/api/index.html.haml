---
title: Artoo API
author: The Hybrid Group
page_title: API
page_subtitle: "The Artoo API provides an interface for retrieving information and communicating with the currently running robots."
layout: page
---

:markdown
	## How To Connect

	Now that you are ready to write your own code you can access a running Artoo API server.

	### Running your robot:
	
	To test your code you can type this on your console:

	    :::ruby
		artoo start myrobot.rb
		
	or
		
	    :::ruby
	    ruby myrobot.rb

	
	For example, on this code:

	    :::javascript
		require 'artoo'
		
		connection :loop
		device :passthru
		api :host => '127.0.0.1', :port => '4321'
		
		work do
		  puts "Hello from the API running at \#{api_host}:\#{api_port}..."
		end

	artoo automatically, starts the server.

	## How To Configure
	
	The Artoo API server, allows a configuration for your robots.

	You can set it up like this:

	    :::ruby
		  api :host => '127.0.0.1', :port => '4321'
		
	Now you can run the server on the curl : `http://127.0.0.1:4321`.

	For example:

	    :::ruby
	    require 'artoo'

	    connection :loop
	    device :passthru
	    api :host => '127.0.0.1', :port => '4321'

	    work do
	      puts "Hello from the API running at \#{api_host}:\#{api_port}..."
	    end	

	## Routes

	### GET /robots

	Our first route returns all the Robots the master class knows about in JSON
	format.
      	
	   
	    [
	      {
	        "name": "SpheroBot",
	        "connections": [
	          {
	            "name": "sphero",
	            "port": "/dev/rfcomm0",
	            "adaptor": "Sphero",
	            "connection_id": 2778
	          }
	        ],
	        "devices": [
	          {
	            "name": "sphero",
	            "driver": "Sphero",
	            "pin": null,
	            "connection": {
	              "name": "sphero",
	              "port": "/dev/rfcomm0",
	              "adaptor": "Sphero",
	              "connection_id": 2778
	            },
	            "commands": [
	              "detect_collisions",
	              "roll",
	              "set_color",
	              "color",
	              "stop"
	            ]
	          }
	        ]
	      }
	    ]

	### GET /robots/:robotid

	Given a robot's name, returns JSON information about the requested Robot:

	    {
	      "name": "SpheroBot",
	      "connections": [
	        {
	          "name": "sphero",
	          "port": "/dev/rfcomm0",
	          "adaptor": "Sphero",
	          "connection_id": 2778
	        }
	      ],
	      "devices": [
	        {
	          "name": "sphero",
	          "driver": "Sphero",
	          "pin": null,
	          "connection": {
	            "name": "sphero",
	            "port": "/dev/rfcomm0",
	            "adaptor": "Sphero",
	            "connection_id": 2778
	          },
	          "commands": [
	            "detect_collisions",
	            "roll",
	            "set_color",
	            "color",
	            "stop"
	          ]
	        }
	      ]
	    }

	### GET /robots/:robotid/devices

	Given a robot's name, returns JSON information about the devices belonging to
	the requested Robot:

	    [
	      {
	        "name": "sphero",
	        "driver": "Sphero",
	        "pin": null,
	        "connection": {
	          "name": "sphero",
	          "port": "/dev/rfcomm0",
	          "adaptor": "Sphero",
	          "connection_id": 2778
	        },
	        "commands": [
	          "detect_collisions",
	          "roll",
	          "set_color",
	          "color",
	          "stop"
	        ]
	      }
	    ]

	### GET /robots/:robotid/devices/:deviceid

	Given the names of a device and the robot it belongs to, returns data on the
	specified device.

	    {
	      "name": "sphero",
	      "driver": "Sphero",
	      "pin": null,
	      "connection": {
	        "name": "sphero",
	        "port": "/dev/rfcomm0",
	        "adaptor": "Sphero",
	        "connection_id": 2778
	      },
	      "commands": [
	        "detect_collisions",
	        "roll",
	        "set_color",
	        "color",
	        "stop"
	      ]
	    }

	### GET /robots/:robotid/devices/:deviceid/commands

	Given the names of a device and the robot it belongs to, returns all commands
	available for the specified device.

	    [
	      "detect_collisions",
	      "roll",
	      "set_color",
	      "color",
	      "stop"
	    ]

	### POST /robots/:robotid/devices/:deviceid/commands/:commandid

	Given a robot name, device name, and command name, executes a robot's command
	and returns the result.

	    // example pending

	### GET /robots/:robotid/connections

	Given a robot's name, returns JSON information about the connections belonging
	to the requested Robot:

	    [
	      {
	        "name": "sphero",
	        "port": "/dev/rfcomm0",
	        "adaptor": "Sphero",
	        "connection_id": 2778
	      }
	    ]

	### GET /robots/:robotid/connections/:connectionid

	Given a robot's name, returns JSON information about the connections belonging
	to the requested Robot:

	    {
	      "name": "sphero",
	      "port": "/dev/rfcomm0",
	      "adaptor": "Sphero",
	      "connection_id": 2778
	    }

	### GET /robots/:robotid/devices/:deviceid/events

	Routes to a Socket.IO route to handle WebSockets connections requesting updates
	on device events.

	### WS_GET /events

	A Socket.IO route to handle updating clients whenever a device sends
	an 'update' event.