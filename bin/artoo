#!/usr/bin/env ruby
require 'rubygems'
require 'thor'
require 'thor/group'
require 'artoo/robot'
require 'artoo/commands/commands'
require 'artoo/commands/generate'
require 'artoo/commands/connect'
require 'artoo/commands/install'

if Gem::Specification::find_all_by_name('artoo-arduino').any?
  require 'artoo/commands/firmata'
end

if Gem::Specification::find_all_by_name('artoo-digispark').any?
  require 'artoo/commands/littlewire'
end

Celluloid.logger = nil

# load main commands
module CLI
  class Root < Thor
    include Thor::Actions

    desc 'version', 'Displays the current version'
    def version
      say Artoo::VERSION
    end

    desc "console ROBOT", "Run a robot using the Robi console"
    def console(robot)
      run("robi #{robot}")
    end

    desc "start ROBOT", "Run a robot"
    option :delay, :default => 0, :desc => "Number of seconds to wait for connections"
    def start(robot)
      say "Starting robot..."
      delay = options[:delay].to_i
      sleep(delay) if delay > 0
      run("ruby #{robot}")
    end

    desc "generate SUBCOMMAND ...ARGS", "Generates a new robot or adaptor"
    subcommand "generate", Artoo::Commands::Generate

    desc "connect SUBCOMMAND ...ARGS", "Connects to device"
    subcommand "connect", Artoo::Commands::Connect

    desc "install SUBCOMMAND ...ARGS", "Installs utility programs"
    subcommand "install", Artoo::Commands::Install

    if Gem::Specification::find_all_by_name('artoo-arduino').any?
      desc "firmata SUBCOMMAND <serial_port>", "Installs avrdude and uploads firmata to the arduino"
      subcommand "firmata", Artoo::Commands::Firmata
    end

    if Gem::Specification::find_all_by_name('artoo-digispark').any?
      desc "littlewire SUBCOMMAND", "Uploads littlewire protocol to digispark"
      subcommand "littlewire", Artoo::Commands::Littlewire
    end
  end
end

# require any custom commands installed by artoo adaptor or driver gems
Dir["#{Artoo::Commands::Commands.install_dir}/*.rb"].each {|file| require file }

CLI::Root.start
